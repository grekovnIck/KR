import datetime

from aiogram import types, Dispatcher
from create_bot import dp, bot
import messages_text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from data_base import sqllite_db
from keyboards.client_get_phone_kb import kb_get_phone_number
from keyboards.client_select_type_kb import kb_client_select
from keyboards.transfer_kb import kb_transfer
from keyboards.order_kb import kb_order
from handlers.liked_orders import switch_to_liked_orders
from handlers.liked_transfers import switch_to_liked_transfers


class FSM_registrat_user(StatesGroup):
    name = State()
    phone = State()


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    if not await sqllite_db.sql_check_id_exists(message.from_user.id):
        await FSM_registrat_user.name.set()
        await message.answer(messages_text.GET_NAME)
    else:
        await bot.send_message(message.from_user.id, messages_text.HELLO, reply_markup=kb_client_select)


@dp.message_handler(state=FSM_registrat_user.name)
async def load_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        print(message.text)
        data['name'] = message.text # TODO: –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏
    await message.answer(messages_text.GET_PHONE, reply_markup=kb_get_phone_number)
    await FSM_registrat_user.phone.set()


@dp.message_handler(state=FSM_registrat_user.phone)
async def load_phone(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        print(message.contact)
        data['phone'] = message.contact['phone_number'] # TODO: –Ω–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        data['id'] = message.contact['user_id']
        data['registrate'] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
    async with state.proxy() as data:
        s = f'–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã:\n' \
            f'   <b>–ò–º—è:</b> <i>{data["name"]}</i>\n' \
            f'   <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> <i>{data["phone"]}</i>'
        await message.answer(s, parse_mode='HTML', reply_markup=kb_client_select)
    output = (str(data['id']), data['name'], data['phone'], data['registrate'])
    await sqllite_db.sql_create_user(output)
    await state.finish()


@dp.message_handler(lambda message: '–ó–∞–∫–∞–∑–∞—Ç—å' == message.text)
async def select_role(message: types.Message):
    await message.answer('–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=kb_order)


@dp.message_handler(lambda message: '–ü–µ—Ä–µ–≤–µ–∑—Ç–∏' == message.text)
async def select_role(message: types.Message):
    await message.answer('–ú–µ–Ω—é –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞', reply_markup=kb_transfer)


@dp.message_handler(lambda message: '–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞' == message.text)
async def switch_order_menu(message: types.Message):
    await message.answer('–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=kb_order)


@dp.message_handler(lambda message: '–ú–µ–Ω—é –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞' == message.text)
async def switch_transfer_menu(message: types.Message):
    await message.answer('–ú–µ–Ω—é –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞', reply_markup=kb_transfer)


@dp.message_handler(lambda message: '‚ù§Ô∏è' == message.text)
async def switch_transfer_liked_orders(message: types.Message):
    print(await sqllite_db.sql_get_liked_transfers(message.from_user.id))
    await message.answer('–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏', reply_markup=kb_order)
    await switch_to_liked_transfers(message, await sqllite_db.sql_get_liked_transfers(message.from_user.id))


@dp.message_handler(lambda message: 'üß°' == message.text)
async def switch_order_liked_transfers(message : types.Message):
    #print(await sqllite_db.sql_get_liked_orders(message.from_user.id))
    await message.answer('–ü–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∑–∞–∫–∞–∑—ã', reply_markup=kb_transfer)
    #liked_orders = await sqllite_db.sql_get_liked_orders(message.from_user.id)
    await switch_to_liked_orders(message, await sqllite_db.sql_get_liked_orders(message.from_user.id))


@dp.message_handler(lambda message: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' == message.text)
async def switch_order_liked_transfers(message : types.Message):    #print(await sqllite_db.sql_get_liked_orders(message.from_user.id))
    await message.answer('–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã <code>Grekov Nickolay</code>', parse_mode='HTML',
                         reply_markup=kb_order)


@dp.message_handler(lambda message: '–û –ø—Ä–æ–µ–∫—Ç–µ' == message.text)
async def switch_order_liked_transfers(message : types.Message):    #print(await sqllite_db.sql_get_liked_orders(message.from_user.id))
    await message.answer('–ú–∏—Å—Å–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –ª—é–¥—è–º –Ω–∞–π—Ç–∏ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø–∏–ª–∏ –±—ã –∏ –ø—Ä–∏–≤–µ–∑–ª–∏ –∏–º —Ç–æ–≤–∞—Ä'
                         '–∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞. ', parse_mode='HTML',
                         reply_markup=kb_order)



def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_message_handler(load_phone, content_types=types.ContentTypes.CONTACT, state=FSM_registrat_user.phone)
    dp.register_message_handler(load_name, state=FSM_registrat_user.name)
    dp.register_message_handler(switch_order_menu, lambda message: '–ú–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞' == message.text)
    dp.register_message_handler(switch_transfer_menu, lambda message: '–ú–µ–Ω—é –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∞' == message.text)
    dp.register_message_handler(switch_transfer_liked_orders, lambda message: 'üß°' == message.text)
    dp.register_message_handler(switch_order_liked_transfers, lambda message: '‚ù§Ô∏è' == message.text)






